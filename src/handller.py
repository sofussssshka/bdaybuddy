from telegram import Update, MessageEntity
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes, filters, ConversationHandler, MessageHandler, \
    CallbackContext
from src.database import get_connection
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.schedulers.background import BackgroundScheduler
from apscheduler.triggers.cron import CronTrigger
from datetime import datetime, timedelta
import asyncio
import schedule


ASK_BIRTHDAY_NAME: int
ASK_BIRTHDAY_NAME, ASK_BIRTHDAY_DATE, ASK_DELETE_BIRTHDAY, ASK_EDIT_BIRTHDAY_NAME, ASK_EDIT_BIRTHDAY_DATE,ASK_WISH,ASK_DELETE_WISH,SET_REQUISITES_STATE = range(8)


class Commandshendler:
    def __init__(self, app):
        self.app = app
        self.db = get_connection()
        self.scheduler = AsyncIOScheduler()  # Initialize Async Scheduler
        self.setup()
        self.wishlist = {}
        self.schedule_daily_birthday_check()
        self.chat_id = None


    def setup(self):
        self.app.add_handler(CommandHandler("start", self.start))
        self.app.add_handler(CommandHandler("help", self.help))
        self.app.add_handler(CommandHandler("get_requisites", self.get_requisites))
        self.app.add_handler(CommandHandler("view_birthdays", self.view_birthdays))
        self.app.add_handler(CommandHandler("my_wishlist", self.my_wishlist))
        self.app.add_handler(ConversationHandler(
            entry_points=[CommandHandler("view_wishlist", self.view_wishlist)],
            states={
                ASK_BIRTHDAY_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.ask_view_wishlist)],
            },
            fallbacks=[CommandHandler("cancel", self.cancel)]
        ))
        self.app.add_handler(ConversationHandler(
            entry_points=[CommandHandler("add_birthday", self.add_birthday)],
            states={
                ASK_BIRTHDAY_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.ask_birthday)],
                ASK_BIRTHDAY_DATE: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.save_birthday)]

            },
            fallbacks=[CommandHandler("cancel", self.cancel)]
        ))
        self.app.add_handler(ConversationHandler(
            entry_points=[CommandHandler("delete_birthday", self.delete_birthday)],
            states={
                ASK_BIRTHDAY_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.confirm_delete)],
            },
            fallbacks=[CommandHandler("cancel", self.cancel)]
        ))
        self.app.add_handler(ConversationHandler(
            entry_points=[CommandHandler("edit_birthday", self.edit_birthday)],
            states={
                ASK_EDIT_BIRTHDAY_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.ask_edit_birthday)],
                ASK_EDIT_BIRTHDAY_DATE: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.save_edit_birthday)]
            },
            fallbacks=[CommandHandler("cancel", self.cancel)]
        ))
        self.app.add_handler(ConversationHandler(
            entry_points=[CommandHandler("add_wish", self.add_wish)],
            states={
                ASK_WISH: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.save_wish)],
            },
            fallbacks=[CommandHandler("cancel", self.cancel)]
        ))
        self.app.add_handler(ConversationHandler(
            entry_points=[CommandHandler("delete_wish", self.delete_wish)],
            states={
                ASK_DELETE_WISH: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.save_delete_wish)],
            },
            fallbacks=[CommandHandler("cancel", self.cancel)]
        ))
        self.app.add_handler(ConversationHandler(
            entry_points=[CommandHandler("set_requisites", self.set_requisites)],
            states={
                SET_REQUISITES_STATE: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.save_requisites)]
            },
            fallbacks=[CommandHandler("cancel", self.cancel)]
        ))

    async def set_requisites(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Command for administrators to set the requisites."""
        if update.message.chat.type in ['group', 'supergroup']:
            user_id = update.message.from_user.id
            chat_id = update.message.chat.id
            admins = await context.bot.get_chat_administrators(chat_id)
            if any(admin.user.id == user_id for admin in admins):
                await update.message.reply_text("–í–≤–µ–¥—ñ—Ç—å —Ä–µ–∫–≤—ñ–∑–∏—Ç–∏ –¥–ª—è –≥—Ä—É–ø–∏:")
                return SET_REQUISITES_STATE  # State for the next step
            else:
                await update.message.reply_text("–í–∏ –Ω–µ –º–æ–∂–µ—Ç–µ –¥–æ–¥–∞—Ç–∏ —Ä–µ–∫–≤—ñ–∑–∏—Ç–∏, –∞–¥–∂–µ –Ω–µ —è–≤–ª—è—î—Ç–µ—Å—å –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
        else:
            await update.message.reply_text("–¶—è –∫–æ–º–∞–Ω–¥–∞ –ø—Ä–∞—Ü—é—î —Ç—ñ–ª—å–∫–∏ —É –≥—Ä—É–ø–∞—Ö.")

    async def save_requisites(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Save requisites to the database."""
        chat_id = update.message.chat.id
        requisites = update.message.text

        try:
            with self.db.cursor() as cursor:
                cursor.execute(
                    "INSERT INTO requisites (chat_id, bank_details) VALUES (%s, %s) "
                    "ON DUPLICATE KEY UPDATE bank_details = VALUES(bank_details)",
                    (chat_id, requisites)
                )
                self.db.commit()

            await update.message.reply_text("–†–µ–∫–≤—ñ–∑–∏—Ç–∏ —É—Å–ø—ñ—à–Ω–æ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ñ!")
        except Exception as e:
            await update.message.reply_text(f"–ü–æ–º–∏–ª–∫–∞ —É –≤–≤–µ–¥–µ–Ω—ñ —Ä–µ–∫–≤—ñ–∑–∏—Ç—ñ–≤: {e}")
        return ConversationHandler.END

    async def get_requisites(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Retrieve requisites from the database."""
        chat_id = update.message.chat.id

        try:
            with self.db.cursor() as cursor:
                cursor.execute("SELECT bank_details FROM requisites WHERE chat_id = %s", (chat_id,))
                result = cursor.fetchone()

            if result:
                await update.message.reply_text(f"–†–µ–∫–≤—ñ–∑–∏—Ç–∏: {result[0]}")
            else:
                await update.message.reply_text("–í —Ü—ñ–π –≥—Ä—É–ø—ñ —â–µ –Ω–µ –¥–æ–¥–∞–Ω—ñ —Ä–µ–∫–≤—ñ–∑–∏—Ç–∏.")
        except Exception as e:
            await update.message.reply_text(f"Error retrieving requisites: {e}")

    async def capture_chat_id(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        chat_id = update.effective_chat.id

        connection = get_connection()
        with connection.cursor() as cursor:
            cursor.execute(
                "INSERT IGNORE INTO birthdays (chat_id) VALUES (%s)",
                (chat_id,)
            )
        connection.commit()
        connection.close()
        print(f"Captured chat_id: {chat_id}")

    async def check_birthdays(self):
        """Function to check the database for today‚Äôs birthdays and send greetings."""

        connection = get_connection()
        today = datetime.now().strftime('%m-%d')

        # Fetch all chat_id values
        with connection.cursor() as cursor:
            cursor.execute("SELECT DISTINCT chat_id FROM birthdays")
            chat_ids = cursor.fetchall()

        if not chat_ids:
            print("No chat IDs found in the database.")
            return

        print(f"Chat IDs found: {chat_ids}")

        for chat_id_row in chat_ids:
            chat_id = chat_id_row[0]


            with connection.cursor() as cursor:
                cursor.execute(
                    "SELECT nickname FROM birthdays WHERE DATE_FORMAT(birthday, '%m-%d') = %s AND chat_id = %s",
                    (today, chat_id))
                birthdays = cursor.fetchall()

            if not birthdays:
                print(f"No birthdays found today for group with chat_id {chat_id}.")
                continue

            for birthday in birthdays:
                nickname = birthday[0]
                message = f"üéâ –ó –î–Ω–µ–º –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è, {nickname}! üéÇ –©–∏—Ä–æ –±–∞–∂–∞—î–º–æ –≤—Å—å–æ–≥–æ –Ω–∞–π–∫—Ä–∞—â–æ–≥–æ!"
                print(f"Sending message to chat_id {chat_id}: {message}")
                try:
                    await self.app.bot.send_message(chat_id=chat_id, text=message)
                    print(f"Message successfully sent to {nickname}")
                except Exception as e:
                    print(f"Error sending message: {e}")

        connection.close()

    def schedule_daily_birthday_check(self):
        """Schedules the birthday check to run daily at a specified time."""
        self.scheduler.add_job(self.check_birthdays, CronTrigger(hour=16, minute=17))
        self.scheduler.start()



    async def delete_wish(self, update: Update, context: CallbackContext):
        nickname = f"@{update.effective_user.username}"
        query = "SELECT id FROM birthdays WHERE nickname = %s"
        conn = get_connection()
        cursor = conn.cursor()
        cursor.execute(query, (nickname,))
        result = cursor.fetchone()

        if result is None:
            await update.message.reply_text(
                "–í–∞—à –¥–µ–Ω—å –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π, —Ç–æ–º—É –≤–∏ –Ω–µ –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Å–≤—ñ–π –≤—ñ—à–ª—ñ—Å—Ç."
            )
            cursor.close()
            conn.close()
            return ConversationHandler.END

        birthday_id = result[0]
        wishlist_query = "SELECT item_name FROM wishlists WHERE birthday_id = %s"
        cursor.execute(wishlist_query, (birthday_id,))
        results = cursor.fetchall()

        wish_map = {}
        i = 1
        if results:
            wishlist_text = "–í–∞—à –≤—ñ—à–ª—ñ—Å—Ç:\n"
            for item in results:
                wishlist_text += f"{i}. üéÅ {item[0]}\n"
                wish_map[i] = item[0]
                i += 1
            wishlist_text += "\n–í–≤–µ–¥—ñ—Ç—å —Ü–∏—Ñ—Ä—É –±–∞–∂–∞–Ω–Ω—è, —è–∫–µ –≤–∏ —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏."
        else:
            wishlist_text = "–í–∞—à –≤—ñ—à–ª—ñ—Å—Ç –ø–æ—Ä–æ–∂–Ω—ñ–π."

        context.user_data['wish_map'] = wish_map
        await update.message.reply_text(wishlist_text)
        cursor.close()
        conn.close()
        return ASK_DELETE_WISH

    async def save_delete_wish(self, update: Update, context: CallbackContext):
        wish_map = context.user_data['wish_map']
        text_choose = update.message.text
        if text_choose.isdigit() and int(text_choose) in wish_map:
            text_value = wish_map.get(int(text_choose))
            delete_query = "DELETE FROM wishlists WHERE item_name = %s"
            conn = get_connection()
            cursor = conn.cursor()
            cursor.execute(delete_query, (text_value,))
            conn.commit()

            await update.message.reply_text(f"–ü–æ–±–∞–∂–∞–Ω–Ω—è '{text_value}' —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–µ.")
        else:
            await update.message.reply_text("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –≤–∏–±—ñ—Ä. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")

        return ConversationHandler.END

    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        await update.message.reply_text("–ü—Ä–∏–≤—ñ—Ç, —è BDayBuddy!–ù–∞–ø–∏—à—ñ—Ç—å /help –¥–ª—è —Å–ø–∏—Å–∫—É –∫–æ–º–∞–Ω–¥.")

    async def help(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        await update.message.reply_text(
            "–ö–æ–º–∞–Ω–¥–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:\n/view_birthdays - –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –≤—Å—ñ –¥–Ω—ñ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è\n/add_wish - –î–æ–¥–∞—Ç–∏ –µ–ª–µ–º–µ–Ω—Ç –¥–æ —Å–≤–æ–≥–æ —Å–ø–∏—Å–∫—É –±–∞–∂–∞–Ω—å\n/delete_wish - –í–∏–¥–∞–ª–∏—Ç–∏ –ø–æ–±–∞–∂–∞–Ω–Ω—è –∑ —Å–≤–æ–≥–æ —Å–ø–∏—Å–∫—É —é–∞–∂–∞–Ω—å\n/view_wishlist - –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —á–∏–π—Å—å —Å–ø–∏—Å–æ–∫ –±–∞–∂–∞–Ω—å\n/my_wishlist - –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Å–≤—ñ–π —Å–ø–∏—Å–æ–∫ –±–∞–∂–∞–Ω—å\n/get_requisites - –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Ä–µ–∫–≤—ñ–∑–∏—Ç–∏\n\n–ö–æ–º–∞–Ω–¥–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n/add_birthday - –î–æ–¥–∞—Ç–∏ –Ω–æ–≤–∏–π –¥–µ–Ω—å –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è\n/edit_birthday - –†–µ–¥–∞–≥—É–≤–∞—Ç–∏ —ñ—Å–Ω—É—é—á–∏–π –¥–µ–Ω—å –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è\n/delete_birthday - –í–∏–¥–∞–ª–∏—Ç–∏ –¥–µ–Ω—å –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è\n/set_requisites - –î–æ–¥–∞—Ç–∏ —Ä–µ–∫–≤—ñ–∑–∏—Ç–∏\n")

    async def add_birthday(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user = update.effective_user
        chat = await context.bot.get_chat(update.message.chat_id)
        member = await chat.get_member(user.id)

        if not member.status in ["administrator", "creator"]:
            await update.message.reply_text("–í–∏–±–∞—á—Ç–µ, –∞–ª–µ —Ü—è –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
            return ConversationHandler.END

        await update.message.reply_text("–í–≤–µ–¥—ñ—Ç—å –Ω—ñ–∫–Ω–µ–π–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥ @nickname")
        return ASK_BIRTHDAY_NAME

    async def ask_birthday(self, update: Update, context: CallbackContext):
        while True:
            text = update.message.text
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ —Ñ–æ—Ä–º–∞—Ç –Ω—ñ–∫–Ω–µ–π–º–∞
            if not text.startswith("@"):
                await update.message.reply_text("–ù—ñ–∫–Ω–µ–π–º –º–∞—î –ø–æ—á–∏–Ω–∞—Ç–∏—Å—è –∑ '@'. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:")
                return ASK_BIRTHDAY_NAME

            nicknames = await self.get_all_nicknames()

            if text in nicknames:
                await update.message.reply_text("–î–∞—Ç–∞ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤–∂–µ —ñ—Å–Ω—É—î!")
                return ConversationHandler.END

            context.user_data['name'] = text
            entities = update.message.entities

            for entity in entities:
                if entity.type == MessageEntity.MENTION:
                    username = update.message.text[entity.offset:entity.offset + entity.length]
                    context.user_data['user_id'] = username

            await update.message.reply_text(
                f"–í–≤–µ–¥—ñ—Ç—å –¥–∞—Ç—É –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è –¥–ª—è {context.user_data['name']} –≤ —Ñ–æ—Ä–º–∞—Ç—ñ YYYY-MM-DD")
            return ASK_BIRTHDAY_DATE

    async def save_birthday(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        birthday = update.message.text
        chat_id = update.effective_chat.id
        name = context.user_data['name']
        id = context.user_data['user_id']

        query = """
                    INSERT INTO birthdays (nickname, birthday, chat_id)
                    VALUES (%s, %s ,%s)
                    """
        conn = get_connection()
        cursor = conn.cursor()
        cursor.execute(query, (name, birthday, chat_id))
        conn.commit()

        await update.message.reply_text(f"–î–∞—Ç—É –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è –¥–ª—è {context.user_data['name']} –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!")
        context.user_data.clear()




    async def view_birthdays(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑—É—î –¥–Ω—ñ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è –¥–ª—è –ø–æ—Ç–æ—á–Ω–æ—ó –≥—Ä—É–ø–∏."""
        chat_id = update.effective_chat.id  # –û—Ç—Ä–∏–º—É—î–º–æ chat_id –≥—Ä—É–ø–∏

        # –ó–∞–ø–∏—Ç —ñ–∑ —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—î—é –∑–∞ chat_id
        query = "SELECT nickname, DATE_FORMAT(birthday, '%d-%m-%Y') FROM birthdays WHERE chat_id = %s"

        conn = get_connection()
        cursor = conn.cursor()
        cursor.execute(query, (chat_id,))  # –ü–µ—Ä–µ–¥–∞—î–º–æ chat_id —è–∫ –ø–∞—Ä–∞–º–µ—Ç—Ä –∑–∞–ø–∏—Ç—É

        results = cursor.fetchall()
        cursor.close()
        conn.close()

        if results:
            birthdays_text = "üìÖ –°–ø–∏—Å–æ–∫ –¥–Ω—ñ–≤ –Ω–∞—Ä–æ–¥–∂–µ–Ω—å:\n"
            for nickname, birthday in results:
                birthdays_text += f"üë§ {nickname}: üéÇ {birthday}\n"
        else:
            birthdays_text = "üì≠ –£ —Ü—ñ–π –≥—Ä—É–ø—ñ –Ω–µ–º–∞—î –∑–∞–ø–∏—Å–∞–Ω–∏—Ö –¥–Ω—ñ–≤ –Ω–∞—Ä–æ–¥–∂–µ–Ω—å."

        await update.message.reply_text(birthdays_text)


    async def delete_birthday(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user = update.effective_user
        chat = await context.bot.get_chat(update.message.chat_id)
        member = await chat.get_member(user.id)

        if not member.status in ["administrator", "creator"]:
            await update.message.reply_text("–í–∏–±–∞—á—Ç–µ, –∞–ª–µ —Ü—è –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
            return
        await update.message.reply_text("–í–≤–µ–¥—ñ—Ç—å –Ω—ñ–∫–Ω–µ–π–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, —è–∫–æ–≥–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤–∏–¥–∞–ª–∏—Ç–∏, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥ @nickname")
        return ASK_BIRTHDAY_NAME

    async def confirm_delete(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        nickname_to_delete = update.message.text
        nicknames = await self.get_all_nicknames()

        if nickname_to_delete not in nicknames:
            await update.message.reply_text("–¶–µ–π –Ω—ñ–∫–Ω–µ–π–º –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ —Å–ø–∏—Å–∫—É –¥–Ω—ñ–≤ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è.")
            return ConversationHandler.END

        query = "SELECT id FROM birthdays WHERE nickname = %s"
        conn = get_connection()
        cursor = conn.cursor()
        cursor.execute(query, (nickname_to_delete,))
        result = cursor.fetchone()

        if result:
            birthday_id = result[0]
            delete_wishlist_query = "DELETE FROM wishlists WHERE birthday_id = %s"
            cursor.execute(delete_wishlist_query, (birthday_id,))
            conn.commit()

        # Now, delete the birthday entry
        delete_birthday_query = "DELETE FROM birthdays WHERE nickname = %s"
        cursor.execute(delete_birthday_query, (nickname_to_delete,))
        conn.commit()

        await update.message.reply_text(f"–î–µ–Ω—å –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è –¥–ª—è {nickname_to_delete} —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ!")
        cursor.close()
        conn.close()
        return ConversationHandler.END


        query = "DELETE FROM birthdays WHERE nickname = %s"
        conn = get_connection()
        cursor = conn.cursor()
        cursor.execute(query, (nickname_to_delete,))
        conn.commit()

        await update.message.reply_text(f"–î–µ–Ω—å –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è –¥–ª—è {nickname_to_delete} —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ!")
        cursor.close()
        conn.close()
        return ConversationHandler.END

    async def edit_birthday(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        user = update.effective_user
        chat = await context.bot.get_chat(update.message.chat_id)
        member = await chat.get_member(user.id)

        if not member.status in ["administrator", "creator"]:
            await update.message.reply_text("–í–∏–±–∞—á—Ç–µ, –∞–ª–µ —Ü—è –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
            return ConversationHandler.END

        # –ó–∞–ø–∏—Ç –Ω—ñ–∫–Ω–µ–π–º–∞ –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è
        await update.message.reply_text(
            "–í–≤–µ–¥—ñ—Ç—å –Ω—ñ–∫–Ω–µ–π–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, —á–∏—é –¥–∞—Ç—É –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑–º—ñ–Ω–∏—Ç–∏, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥ @nickname")
        return ASK_EDIT_BIRTHDAY_NAME

    async def ask_edit_birthday(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        nickname = update.message.text
        nicknames = await self.get_all_nicknames()

        if nickname not in nicknames:
            await update.message.reply_text("–¶–µ–π –Ω—ñ–∫–Ω–µ–π–º –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ —Å–ø–∏—Å–∫—É –¥–Ω—ñ–≤ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è.")
            return ConversationHandler.END

        context.user_data['nickname'] = nickname
        await update.message.reply_text(f"–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤—É –¥–∞—Ç—É –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è –¥–ª—è {nickname} —É —Ñ–æ—Ä–º–∞—Ç—ñ YYYY-MM-DD")
        return ASK_EDIT_BIRTHDAY_DATE

    async def save_edit_birthday(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        new_birthday = update.message.text
        nickname = context.user_data['nickname']

        query = "UPDATE birthdays SET birthday = %s WHERE nickname = %s"
        conn = get_connection()
        cursor = conn.cursor()
        cursor.execute(query, (new_birthday, nickname))
        conn.commit()

        await update.message.reply_text(f"–î–∞—Ç—É –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è –¥–ª—è {nickname} –æ–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {new_birthday}.")
        cursor.close()
        conn.close()
        context.user_data.clear()
        return ConversationHandler.END

    async def view_wishlist(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        await update.message.reply_text(
            "–í–≤–µ–¥—ñ—Ç—å –Ω—ñ–∫–Ω–µ–π–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, —á–∏–π –≤—ñ—à–ª—ñ—Å—Ç –≤–∏ —Ö–æ—á–µ—Ç–µ –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥ @nickname:")
        return ASK_BIRTHDAY_NAME

    async def ask_view_wishlist(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        nickname = update.message.text.strip()

        if not nickname.startswith('@'):
            await update.message.reply_text("–ù—ñ–∫–Ω–µ–π–º –º–∞—î –ø–æ—á–∏–Ω–∞—Ç–∏—Å—è –∑ '@'.")
            return ConversationHandler.END

        nicknames = await self.get_all_nicknames()
        if nickname not in nicknames:
            await update.message.reply_text("–¶–µ–π –Ω—ñ–∫–Ω–µ–π–º –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ —Å–ø–∏—Å–∫—É –¥–Ω—ñ–≤ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è.")
            return ConversationHandler.END

        query = "SELECT id FROM birthdays WHERE nickname = %s"
        with get_connection() as conn:
            cursor = conn.cursor()
            cursor.execute(query, (nickname,))
            result = cursor.fetchone()

            if result is None:
                await update.message.reply_text("–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ id –¥–ª—è —Ü—å–æ–≥–æ –Ω—ñ–∫–Ω–µ–π–º–∞.")
                return ConversationHandler.END

            birthday_id = result[0]

            # –î–æ–¥–∞—î–º–æ chat_id –≤ –∑–∞–ø–∏—Ç –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏
            wishlist_query = "SELECT item_name FROM wishlists WHERE birthday_id = %s AND chat_id = %s"
            cursor.execute(wishlist_query, (birthday_id, update.effective_chat.id))
            results = cursor.fetchall()

            if results:
                wishlist_text = f"–í—ñ—à–ª—ñ—Å—Ç –¥–ª—è {nickname}:\n"
                for item in results:
                    wishlist_text += f"üéÅ {item[0]}\n"
            else:
                wishlist_text = f"–í—ñ—à–ª—ñ—Å—Ç –¥–ª—è {nickname} –ø–æ—Ä–æ–∂–Ω—ñ–π."

            await update.message.reply_text(wishlist_text)
            return ConversationHandler.END


    async def my_wishlist(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        nickname = f"@{update.effective_user.username}"
        chat_id = update.effective_chat.id  # –û—Ç—Ä–∏–º—É—î–º–æ chat_id –ø–æ—Ç–æ—á–Ω–æ–≥–æ —á–∞—Ç—É
        query = "SELECT id FROM birthdays WHERE nickname = %s"

        with get_connection() as conn:
            cursor = conn.cursor()
            cursor.execute(query, (nickname,))
            result = cursor.fetchone()

            if result is None:
                await update.message.reply_text(
                    "–í–∞—à –¥–µ–Ω—å –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π, —Ç–æ–º—É –≤–∏ –Ω–µ –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Å–≤—ñ–π –≤—ñ—à–ª—ñ—Å—Ç.")
                return ConversationHandler.END

            birthday_id = result[0]

            # –§—ñ–ª—å—Ç—Ä—É—î–º–æ –ø–æ–±–∞–∂–∞–Ω–Ω—è –¥–ª—è —Ü—å–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É —á–∞—Ç—É
            wishlist_query = "SELECT item_name FROM wishlists WHERE birthday_id = %s AND chat_id = %s"
            cursor.execute(wishlist_query, (birthday_id, chat_id))
            results = cursor.fetchall()

            if results:
                wishlist_text = "–í–∞—à –≤—ñ—à–ª—ñ—Å—Ç:\n"
                for item in results:
                    wishlist_text += f"üéÅ {item[0]}\n"
            else:
                wishlist_text = "–í–∞—à –≤—ñ—à–ª—ñ—Å—Ç –ø–æ—Ä–æ–∂–Ω—ñ–π."

            await update.message.reply_text(wishlist_text)


    async def add_wish(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        await update.message.reply_text("–í–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ –ø–æ–±–∞–∂–∞–Ω–Ω—è:")
        return ASK_WISH

    async def save_wish(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        wish = update.message.text
        nickname = f"@{update.effective_user.username}"
        chat_id = update.effective_chat.id  # Get chat_id of the current group

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —ñ—Å–Ω—É—î —Ç–∞–∫–∏–π –Ω—ñ–∫–Ω–µ–π–º –≤ —Ç–∞–±–ª–∏—Ü—ñ 'birthdays'
        query = "SELECT id FROM birthdays WHERE nickname = %s"

        with get_connection() as conn:
            cursor = conn.cursor()
            cursor.execute(query, (nickname,))
            result = cursor.fetchone()

            if result is None:
                await update.message.reply_text(
                    "–í–∏–±–∞—á—Ç–µ, –∞–ª–µ –≤–∏ –Ω–µ –º–æ–∂–µ—Ç–µ –¥–æ–¥–∞—Ç–∏ –ø–æ–±–∞–∂–∞–Ω–Ω—è, –æ—Å–∫—ñ–ª—å–∫–∏ –≤–∞—à –¥–µ–Ω—å –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π.")
                return ConversationHandler.END

            birthday_id = result[0]

            insert_query = "INSERT INTO wishlists (birthday_id, item_name, chat_id) VALUES (%s, %s, %s)"
            cursor.execute(insert_query, (birthday_id, wish, chat_id))
            conn.commit()

            await update.message.reply_text("–í–∞—à–µ –ø–æ–±–∞–∂–∞–Ω–Ω—è –¥–æ–¥–∞–Ω–æ –¥–æ –≤—ñ—à–ª—ñ—Å—Ç—É!")
            return ConversationHandler.END

    async def cancel(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        await update.message.reply_text("–í–≤–µ–¥–µ–Ω–Ω—è –¥–∞—Ç–∏ –¥–Ω—è –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ")
        context.user_data.clear()
        return ConversationHandler.END

    async def get_all_nicknames(self):
        query = "SELECT nickname FROM birthdays"
        conn = get_connection()
        cursor = conn.cursor()
        cursor.execute(query)
        results = cursor.fetchall()
        nicknames = [row[0] for row in results]
        cursor.close()
        conn.close()
        return nicknames